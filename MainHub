local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Wanz HUB",
   LoadingTitle = "Loading Codes",
   LoadingSubtitle = "Wait...",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Voting System"
   }
})

local Tab = Window:CreateTab("MENU", 4483362458) -- Make sure this is before creating toggles

-- UI Toggle (now properly placed)
local StatsUIToggle = Tab:CreateToggle({
   Name = "Show UI",
   CurrentValue = false,
   Flag = "StatsUI",
   Callback = function(Value)
      if Value then
         createStatsUI()
      else
         if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("PlayerStatsGUI") then
            game:GetService("Players").LocalPlayer.PlayerGui.PlayerStatsGUI:Destroy()
         end
      end
   end,
})

-- Stats UI Creation Function
function createStatsUI()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local RunService = game:GetService("RunService")

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PlayerStatsGUI"
    screenGui.Parent = player.PlayerGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 220, 0, 150)
    mainFrame.Position = UDim2.new(0.5, -110, 0.1, 0)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0)
    mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    mainFrame.BorderSizePixel = 0
    mainFrame.Active = true
    mainFrame.Draggable = true
    mainFrame.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = mainFrame

    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Text = player.Name .. "'s Stats"
    title.Font = Enum.Font.GothamBold
    title.TextSize = 18
    title.Parent = mainFrame

    local cornerTitle = Instance.new("UICorner")
    cornerTitle.CornerRadius = UDim.new(0, 8)
    cornerTitle.Parent = title

    local statLabels = {
        beachBall = Instance.new("TextLabel"),
        traitReroll = Instance.new("TextLabel"),
        statKey = Instance.new("TextLabel"),
        playTime = Instance.new("TextLabel")
    }

    local yPosition = 35
    for _, label in pairs(statLabels) do
        label.Size = UDim2.new(1, -20, 0, 25)
        label.Position = UDim2.new(0, 10, 0, yPosition)
        label.BackgroundTransparency = 1
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Font = Enum.Font.Gotham
        label.TextSize = 16
        label.TextXAlignment = Enum.TextXAlignment.Left
        label.Parent = mainFrame
        yPosition += 25
    end

    statLabels.beachBall.Text = "Beach Balls: Loading..."
    statLabels.traitReroll.Text = "Trait Rerolls: Loading..."
    statLabels.statKey.Text = "Stat Keys: Loading..."
    statLabels.playTime.Text = "Play Time: 00:00:00"

    -- Rest of your stats UI code...
end

-- Auto-remove UI elements
spawn(function()
    while task.wait(1) do
        pcall(function()
            local gui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
            if gui and gui:FindFirstChild("GameEndedAnimationUI") then 
                gui.GameEndedAnimationUI:Destroy() 
            end
            
            local summon = game:GetService("Players").LocalPlayer:FindFirstChild("Summon_Amount")
            if summon then summon:Destroy() end
        end)
    end
end)

-- Game Rewards System
local rewardCheckCooldown = false

local function getPlayerItemAmount(itemName)
    local player = game:GetService("Players").LocalPlayer
    local playerData = game:GetService("ReplicatedStorage").Player_Data:FindFirstChild(player.Name)
    if playerData and playerData:FindFirstChild("Items") then
        local item = playerData.Items:FindFirstChild(itemName)
        if item and item:FindFirstChild("Amount") then
            return item.Amount.Value
        end
    end
    return 0
end

local function showGameResults()
    if rewardCheckCooldown then return end
    rewardCheckCooldown = true
    
    pcall(function()
        task.wait(2) -- Wait for rewards to load
        
        local player = game:GetService("Players").LocalPlayer
        local rewardsFolder = player:FindFirstChild("RewardsShow")
        
        if rewardsFolder then
            local rewardLines = {"Game Finished", "You got:"}
            local foundRewards = false
            
            for _, item in pairs(rewardsFolder:GetChildren()) do
                local rewardAmount = 0
                local itemName = item.Name
                
                if item:IsA("NumberValue") then
                    rewardAmount = item.Value
                elseif item:IsA("Folder") and item:FindFirstChild("Amount") then
                    rewardAmount = item.Amount.Value
                end
                
                if rewardAmount > 0 then
                    local currentAmount = getPlayerItemAmount(itemName)
                    table.insert(rewardLines, string.format("[%dx] %s [Now: %dx]", rewardAmount, itemName, currentAmount))
                    foundRewards = true
                end
            end
            
            if foundRewards then
                Rayfield:Notify({
                    Title = "Game Results",
                    Content = table.concat(rewardLines, "\n"),
                    Duration = 6.5,
                    Image = 4483362458,
                })
            end
        end
    end)
    
    task.wait(5)
    rewardCheckCooldown = false
end

-- Game end detection
spawn(function()
    while task.wait(0.5) do
        pcall(function()
            local player = game:GetService("Players").LocalPlayer
            local gameEnded = player.PlayerGui:FindFirstChild("GameEndedAnimationUI")
            local hasRewards = player:FindFirstChild("RewardsShow")
            
            if gameEnded or hasRewards then
                showGameResults()
                while player.PlayerGui:FindFirstChild("GameEndedAnimationUI") do
                    task.wait(1)
                end
            end
        end)
    end
end)

-- Voting Toggles (now properly placed after Tab creation)
local votingActive = { Next = false, Retry = false }

local NextVoteToggle = Tab:CreateToggle({
   Name = "Vote Next",
   CurrentValue = false,
   Flag = "NextVoteToggle",
   Callback = function(Value)
      votingActive.Next = Value
      if Value then
         Rayfield:Notify({ Title = "Voted", Content = "You voted for Next Map", Duration = 3 })
         spawn(function()
             while votingActive.Next do
                 game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteNext:FireServer()
                 task.wait(1)
             end
         end)
      end
   end,
})

local RetryVoteToggle = Tab:CreateToggle({
   Name = "Vote Retry",
   CurrentValue = false,
   Flag = "RetryVoteToggle",
   Callback = function(Value)
      votingActive.Retry = Value
      if Value then
         Rayfield:Notify({ Title = "Voted", Content = "You voted to Retry Map", Duration = 3 })
         spawn(function()
             while votingActive.Retry do
                 game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteRetry:FireServer()
                 task.wait(1)
             end
         end)
      end
   end,
})

-- Toggle management
NextVoteToggle:OnChanged(function(Value) 
   if Value then 
      votingActive.Retry = false 
      RetryVoteToggle:Set(false) 
   end 
end)

RetryVoteToggle:OnChanged(function(Value) 
   if Value then 
      votingActive.Next = false 
      NextVoteToggle:Set(false) 
   end 
end)
