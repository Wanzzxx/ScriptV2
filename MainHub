local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Wanz Hub [ARX]",
   LoadingTitle = "Loading Data",
   LoadingSubtitle = "Wait...",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Voting System"
   }
})

local Tab = Window:CreateTab("MENU", 4483362458)

-- Conditional UI Removal System
spawn(function()
    while task.wait(1) do
        pcall(function()
            -- Only remove if lobby doesn't exist
            if not workspace:FindFirstChild("Lobby") then
                local gui = game:GetService("Players").LocalPlayer.PlayerGui
                local animUI = gui:FindFirstChild("GameEndedAnimationUI")
                if animUI then 
                    animUI:Destroy() 
                end
            end
            
            -- Always remove summon amount
            local summon = game:GetService("Players").LocalPlayer:FindFirstChild("Summon_Amount")
            if summon then summon:Destroy() end
        end)
    end
end)

-- Player Stats UI Toggle
local StatsUIToggle = Tab:CreateToggle({
   Name = "Show Stats",
   CurrentValue = false,
   Flag = "StatsUI",
   Callback = function(Value)
      if Value then
         -- Create UI function here
      else
         local gui = game:GetService("Players").LocalPlayer.PlayerGui
         if gui:FindFirstChild("PlayerStatsGUI") then
            gui.PlayerStatsGUI:Destroy()
         end
      end
   end,
})

-- Enhanced Reward Detection
local rewardCheckCooldown = false

local function showGameResults()
    if rewardCheckCooldown then return end
    rewardCheckCooldown = true
    
    pcall(function()
        task.wait(2) -- Wait for rewards to load
        
        local player = game:GetService("Players").LocalPlayer
        local rewardsFolder = player:FindFirstChild("RewardsShow")
        
        if rewardsFolder then
            local rewardText = {"Game Finished", "You got:"}
            
            for _, item in pairs(rewardsFolder:GetChildren()) do
                local amount = (item:IsA("NumberValue") and item.Value) or 
                             (item:FindFirstChild("Amount") and item.Amount.Value) or 0
                
                if amount > 0 then
                    table.insert(rewardText, string.format("[%dx] %s", amount, item.Name))
                end
            end
            
            if #rewardText > 2 then -- If we found rewards
                Rayfield:Notify({
                    Title = "Game Results",
                    Content = table.concat(rewardText, "\n"),
                    Duration = 6,
                    Image = 4483362458,
                })
            end
        end
    end)
    
    task.wait(5)
    rewardCheckCooldown = false
end

-- Game End Detection
spawn(function()
    while task.wait(0.5) do
        pcall(function()
            local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
            if playerGui:FindFirstChild("GameEndedAnimationUI") then
                showGameResults()
                -- Wait for animation to complete
                while playerGui:FindFirstChild("GameEndedAnimationUI") do
                    task.wait(1)
                end
            end
        end)
    end
end)

-- Voting System
local votingActive = { Next = false, Retry = false }

local NextVoteToggle = Tab:CreateToggle({
   Name = "Vote Next",
   CurrentValue = false,
   Flag = "NextVoteToggle",
   Callback = function(Value)
      votingActive.Next = Value
      if Value then
         spawn(function()
             while votingActive.Next do
                 game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteNext:FireServer()
                 task.wait(1)
             end
         end)
      end
   end,
})

local RetryVoteToggle = Tab:CreateToggle({
   Name = "Vote Retry",
   CurrentValue = false,
   Flag = "RetryVoteToggle",
   Callback = function(Value)
      votingActive.Retry = Value
      if Value then
         spawn(function()
             while votingActive.Retry do
                 game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteRetry:FireServer()
                 task.wait(1)
             end
         end)
      end
   end,
})

-- Toggle Exclusivity
NextVoteToggle:OnChanged(function(Value)
   if Value then
      RetryVoteToggle:Set(false)
      votingActive.Retry = false
   end
end)

RetryVoteToggle:OnChanged(function(Value)
   if Value then
      NextVoteToggle:Set(false)
      votingActive.Next = false
   end
end)
