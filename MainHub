local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Wanz Hub [ARX]",
   LoadingTitle = "Loading Codes",
   LoadingSubtitle = "Wait...",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "WanzHubConfig",
      FileName = "ARXSettings"
   }
})

local Tab = Window:CreateTab("MENU", 4483362458)

-- Conditional UI Removal System
spawn(function()
    while task.wait(1) do
        pcall(function()
            -- Always remove Summon_Amount
            local summon = game:GetService("Players").LocalPlayer:FindFirstChild("Summon_Amount")
            if summon then summon:Destroy() end
            
            -- Only remove GameEndedAnimationUI when there's no lobby
            if not workspace:FindFirstChild("Lobby") then
                local gui = game:GetService("Players").LocalPlayer.PlayerGui
                local animUI = gui:FindFirstChild("GameEndedAnimationUI")
                if animUI then 
                    animUI:Destroy() 
                end
            end
        end)
    end
end)

-- Player Stats UI Toggle
local StatsUIToggle = Tab:CreateToggle({
   Name = "Player Stats UI",
   CurrentValue = false,
   Flag = "PlayerStatsToggle",
   Callback = function(Value)
      if Value then
         -- Create UI function here
      else
         local gui = game:GetService("Players").LocalPlayer.PlayerGui
         if gui:FindFirstChild("PlayerStatsGUI") then
            gui.PlayerStatsGUI:Destroy()
         end
      end
   end,
})

-- Enhanced Reward Detection with FIXED current amounts
local rewardCheckCooldown = false

local function getPlayerItemAmount(itemName)
    local player = game:GetService("Players").LocalPlayer
    local success, result = pcall(function()
        -- Check both possible locations for player data
        local playerData = game:GetService("ReplicatedStorage").Player_Data:FindFirstChild(player.Name)
        if not playerData then
            playerData = player:FindFirstChild("Data")
        end
        
        if playerData then
            -- Check both possible locations for items
            local items = playerData:FindFirstChild("Items") or playerData:FindFirstChild("Inventory")
            if items then
                local item = items:FindFirstChild(itemName)
                if item then
                    return item:FindFirstChild("Amount") and item.Amount.Value or 1
                end
            end
        end
        return 0
    end)
    return success and result or 0
end

local function showGameResults()
    if rewardCheckCooldown then return end
    rewardCheckCooldown = true
    
    pcall(function()
        task.wait(2) -- Wait for rewards to load
        
        local player = game:GetService("Players").LocalPlayer
        local rewardsFolder = player:FindFirstChild("RewardsShow")
        
        if rewardsFolder then
            local rewardText = {"Game Finished", "You got:"}
            local foundRewards = false
            
            for _, item in pairs(rewardsFolder:GetChildren()) do
                local rewardAmount = 0
                local itemName = item.Name
                
                -- Handle different reward types
                if item:IsA("NumberValue") then
                    rewardAmount = item.Value
                elseif item:IsA("Folder") then
                    rewardAmount = item:FindFirstChild("Amount") and item.Amount.Value or 1
                end
                
                if rewardAmount > 0 then
                    local currentAmount = getPlayerItemAmount(itemName)
                    table.insert(rewardText, string.format("[%dx] %s [Now: %dx]", rewardAmount, itemName, currentAmount))
                    foundRewards = true
                end
            end
            
            if foundRewards then
                Rayfield:Notify({
                    Title = "Game Results",
                    Content = table.concat(rewardText, "\n"),
                    Duration = 6.5,
                    Image = 4483362458,
                })
            else
                Rayfield:Notify({
                    Title = "Game Finished",
                    Content = "No new rewards detected",
                    Duration = 3,
                    Image = 4483362458,
                })
            end
        end
    end)
    
    task.wait(5)
    rewardCheckCooldown = false
end

-- Game End Detection
spawn(function()
    while task.wait(0.5) do
        pcall(function()
            local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
            if playerGui:FindFirstChild("GameEndedAnimationUI") then
                showGameResults()
                while playerGui:FindFirstChild("GameEndedAnimationUI") do
                    task.wait(1)
                end
            end
        end)
    end
end)

-- Voting System
local votingActive = { Next = false, Retry = false }

local NextVoteToggle = Tab:CreateToggle({
   Name = "Vote Next",
   CurrentValue = false,
   Flag = "VoteNextToggle",
   Callback = function(Value)
      votingActive.Next = Value
      if Value then
         Rayfield:Notify({ Title = "Voted", Content = "You voted for Next Map", Duration = 3 })
         spawn(function()
             while votingActive.Next do
                 game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteNext:FireServer()
                 task.wait(1)
             end
         end)
      end
   end,
})

local RetryVoteToggle = Tab:CreateToggle({
   Name = "Vote Retry",
   CurrentValue = false,
   Flag = "VoteRetryToggle",
   Callback = function(Value)
      votingActive.Retry = Value
      if Value then
         Rayfield:Notify({ Title = "Voted", Content = "You voted to Retry Map", Duration = 3 })
         spawn(function()
             while votingActive.Retry do
                 game:GetService("ReplicatedStorage").Remote.Server.OnGame.Voting.VoteRetry:FireServer()
                 task.wait(1)
             end
         end)
      end
   end,
})

-- Toggle Exclusivity
NextVoteToggle:OnChanged(function(Value)
   if Value then
      RetryVoteToggle:Set(false)
      votingActive.Retry = false
   end
end)

RetryVoteToggle:OnChanged(function(Value)
   if Value then
      NextVoteToggle:Set(false)
      votingActive.Next = false
   end
end)

-- Load saved configurations (MUST BE LAST LINE)
Rayfield:LoadConfiguration()
